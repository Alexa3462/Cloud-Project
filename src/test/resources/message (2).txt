package numbers_Tasks_week3;

public class Prime_Armstrong_Reverse_Methods {

    // 1. Write a method that can check if a number is prime or not
    // 2. Write a method that can check if a number is Armstrong number

    // Prime number is a whole number greater than 1 that cannot be exactly
    // divided by any whole number other than itself.
    // Example 2, 3, 5, 7, 11, 13...


    // 2. Armstrong number is the sum of its own digits
    // each raised to the power of the number of digits
    // 153 = Math.pow(1,3) + Math.pow(5,3) + Math.pow(3,3), 370, 371, 407, 1634,

    // 3. Write a return method that can reverse
    //    negative number and return it as int

    public static void main(String[] args) {

        primeNumberCheck(12); // Calling the method for Prime number
        System.out.println("_________________________________");

        armstrongCheck(370); //Calling the method for Armstrong number
        System.out.println("_________________________________");

        int x = ReverseNegativeNum(-12345678); //Calling and assigning the method to x
        System.out.println("The reversed number is " + x);
        System.out.println("_________________________________");

        int y = ReverseNegativeNum2(-1234567); //Calling and assigning the method to y
        System.out.println("The reversed number is " + y);


    }

    //Method for checking if a number is prime or composite
    public static void primeNumberCheck (int n){

            int count = 0;

            for (int i = 2; i <= n; i++) { //Loop from 2 until the given number

                if (n % i == 0) { // basically the definition for prime number. If count is more than 1 the number is composite
                    count += 1;
                    // Can implement break, if count is more than 2, to save computing time.
                }
            }
            if (count == 1) { //Printing the result. If the count is 1, it means the number its ONLY devisible by itself, thus prime
                System.out.println("The number " + n + " is prime number");
            } else {
                System.out.println("The number " + n + " is not a prime number");
            }
        }// End of method

    //Method for checking if a given number is Armstrong number
    public static void armstrongCheck(int n){

        String numAsString = ""+ n; //The whole idea is about manipulating string so at this line the number is converted
        int len = numAsString.length(); // get the lenght of the string.. This will be the power of...
        double TotalSum = 0; // variable where i will store the value of the digits raised to the power of len

        for (int i = 0; i < len; i++) { // Looping the digits of the number. Since the number is converted to string
                                        // im basically looping each char of the string

            TotalSum +=  Math.pow(Integer.parseInt( ""+numAsString.charAt(i)), len);
            // get each digit and raise it to the power of len.
            // There is casting from char to String to Int

        }

        if(TotalSum == n){ // Condition of being an Armstrong number
            System.out.println("The given "+ n +  " number is Armstrong number");
        }else{
            System.out.println("The given "+ n +  " number is not Armstrong number");
        }
    } // End of Method

    //Method for reversing negative number
    //This method uses string manipulation, converts the int to String and back to int
    public static int ReverseNegativeNum(int n){

        String nAsString = "" + n * (-1); // converting the number to positive and casting to string
        String ReversedNum = "";

        for (int i = nAsString.length()-1; i >= 0 ; i--) {// Looping from the last char to the first one

            ReversedNum += nAsString.charAt(i); // adding each char on each other, starting with empty string.

        } // end of for loop

        int IntReversed = Integer.parseInt(ReversedNum) * -1; // parsing back to int and making it negative

        return IntReversed; // return the reversed negative number.

    } // end of method

    // Second Method for reversing negative number
    //This method uses Math
    public static int ReverseNegativeNum2(int num){

        int numPositive = num * (-1); // converts the number to positive
        int reversedNum = 0;

        while(numPositive > 0){

            int digit = numPositive % 10; //keeps the last digit of the number
            reversedNum +=digit; // adds the digit to the new number
            numPositive/=10; // keeps the number and discards the last digit
            reversedNum *=10; // adds a extra 0 next to the number
        }

        return reversedNum/10 *(-1); // gets rid of the last 0, transforms to negative and returns it

    }


}